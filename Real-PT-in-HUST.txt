4th HUST Hacking Festival - Real Penetration Test (Level 4 ~ 7)

작  성  자  : indra ("indra.kr" . "\x40" . "gmail.com"), http://indra.linuxstudy.pe.kr
대회   일시 : KST 2005. 05. 17. (화 18 : 00) ~ 2005. 05. 19 (목 18 : 00)
대회 시상식 : KST 2005. 06. 21. (화 16 : 00)
홈 페이지   : http://www.hust.net

- 서버 구성도
                            ┏━━━━━━━━━━━━━┓
                            ┃                          ┃
                            ┃         Internet         ┃
                            ┃                          ┃
                            ┗━━━━━━━━━━━━━┛
                                          ▽
                            ┏━━━━━━━━━━━━━┓
                            ┃                          ┃
                            ┃        Linux Box         ┃
                            ┃                          ┃
                            ┃     eth0: 공인IP부여     ┃
                            ┃     eth1: 192.168.1.1    ┃
                            ┃                          ┃
                            ┗━━━━━━━━━━━━━┛
                                          ▽
                            ┏━━━━━━━━━━━━━┓
                            ┃                          ┃
                            ┃      Forward Device      ┃
                            ┃                          ┃
                            ┃     eth0: 192.168.1.2    ┃
                            ┃     eth1: 192.168.0.1    ┃
                            ┃  Forward Port: 80, 8080  ┃
                            ┗━━━━━━━━━━━━━┛
                   ▽                                            ▽                       
     ┏━━━━━━━━━━━━━┓               ┏━━━━━━━━━━━━━┓
     ┃                          ┃               ┃                          ┃
     ┃        Web Server        ┃               ┃         DB Server        ┃
     ┃                          ┃               ┃                          ┃
     ┃     eth0: 192.168.0.2    ┃               ┃     eth0: 192.168.0.3    ┃
     ┃     Service Port : 80    ┃               ┃    Service Port: 8080    ┃ 
     ┗━━━━━━━━━━━━━┛               ┗━━━━━━━━━━━━━┛

서버에 대한 간략한 소개

Linux Box : 
 iptables 를 이용하여, 80 port 를 192.168.1.2 로 포워딩하게끔 설정.
외부 eth0 으로부터의 inbound 는 80, 8080 port 빼고 All Deny.
outbound 에 대해서는 All Permit.
두개의 ethernet card 장착. (외부네트워크 영역, 내부네트워크 영역)
하나의 ethernet device 에는 공인아이피를 부여,
다른 하나의 device 에는 내부 아이피(192.168.1.1)를 부여.

Forward Device :
 192.168.1.1 을 DHCP 서버가 아닌 외부 고정아이피로 수동지정.
내부로 이어지는 다른 대역의 아이피(192.168.0.1)를 부여.
Port Forwarding 기능으로 80 port 는 192.168.0.2 로, 8080 port 는 192.168.0.3 으로 포워딩.

Web Server :
 /etc/hosts.deny 파일에 ALL : ALL 을 작성, TCP wrapper에서 관리되는 서비스포트에 대한
모든 inbound 를 일단 Deny.
/etc/hosts.allow 파일에 in.telnetd : localhost 를 작성, telnet 서비스는
loopback 에서의 접속만 가능하도록 설정.
일반적인 utility 의 permission 을 재 정의, 일반사용자는 실행할 수 없게 설정.
각 partition 들에 알맞게 nosuid, noexec, nodev 같은 mount 옵션을 설정.
daemon은 httpd(APM), MySQL, telnet, ssh, etc.
httpd/php 는 최신버전, MySQL 은 4.1.10 버전.

DB Server :
 각 partition 들에 알맞게 nosuid, noexec, nodev 같은 mount 옵션을 설정.
daemon은 MySQL 버전 4.1.10, CTF(Capture The Flag) 를 위한 httpd, ssh, etc.

- level4 문제의 요점 :
    상위 경로 파일 업로드

  level4 문제의 해석 :
    실제 PT 의 경우 SourceCode 가 알려지지 않은 board, groupware, webmail 등의
    사용률이 훨씬 많습니다.
    따라서 그런 프로그램들을 대상으로 공격을 시도할 경우, 온갖 상상력과 추측을
    동원해야 할 경우가 많습니다.
    문제의 경우 파일이름에 대한 변수를 $filename 으로 두었으며, 이는 브라우져
    사용자도 알 수 있게 되어 있습니다.
    내부에서 사용하는 특정 변수에 대해서 추측을 할 경우도 비슷한 변수 패턴으로
    하는것이 대부분 입니다.
    _ (underline) 을 쓰는 변수이름, 일반 lowercase alphabet 으로 쓰는 변수이름,
    각 단어들의 앞 부분을 uppercase 로 처리하는 변수이름 등등 많은 변수이름에
    대한 패턴을 분석하고 이것을 빠르게 자기것으로 만들 때 공격이 성공할 확률은
    높아지고 시간도 줄어들게 될 것 입니다.
    문제에 대해서는 if(!$filepath) $filepath = "blah"; 형식으로 처리했지만,
    실 상황의 경우에는 $filepath 변수가 GLOBAL 형식의 파일안에서 정의된 경우
    include 되지 않게 하여 $filepath 변수를 조작할 수 있는 경우, 
    DBMS 에서 값을 받아와서 변수의 값을 적용할 경우 DBMS 에 connect 되는 부분을
    막음으로써 재 정의 할 수 있는 경우 등 무궁무진 할 것입니다.
    또 한가지 $filepath 변수에 대해 eregi_replace() function 으로 문자열을 치환
    하는 필터링 기능을 우회하는 경우인데, 문제의 SourceCode 자체에 약간의 오타
    가 있어 제 기능을 수행하지 못 했습니다.

    $filepath = eregi_replace("(^\/|\.\|`|'|;|#|~|@|\?|=|&|!|php)", "", $filepath);

    이러한 코드의 경우 대충 보면 문자열 치환이 가능할 것으로 생각하지만,
    비교대상이 각기 1, 2, 3 bytes 로 다양하기 때문에 문제가 생깁니다.
    eregi_replace() 의 동작 구조 상, 전체 $filepath 변수의 문자열을 한 문자씩
    검사하고 다음 문자를 읽어들이는데 각기 다른 바이트를 검사하므로, 
    문자열을 다음과 같이 구상하면 필터링을 우회 할 수 있습니다.
    "p~h~p" - 이렇게 구성한 문자열을 필터링 한 후에는 "php" 라는 문자열이 됨.
    "^\/|blah" - 정규표현식에 의해 ^ 는 문자열의 처음을 나타내므로, 문자열의
    처음에만 '/' 문자를 쓰지 않으면 됨.
    이런 논리적으로 생각 할 수 있는 버그가 존재하는 게시판을 만들었어야 하는데,
    약간의 착오가 있었습니다.
    착오를 일으킨 점 죄송하게 생각합니다.   

- level5 문제의 요점 :
    reverse login

  level5 문제의 해석 :
    요즘은 파일구리, 당나귀 등의 P2P 프로그램의 문제로 outbound 를 destination
    port 80 만 열고 전부 패킷을 통과시키지 못하게 하는 방법도 간간히 
    사용되고 있습니다.
    그런 상황에서, 또는 그 만큼은 아니지만 NAT 로 구성된 서버에서 80 port 로 
    web shell 을 업로드해서 명령을 내릴 수 있다고 해도 행동제약이 많기 때문에
    terminal 을 열어야 합니다.
    문제에서는 web 이라는 계정의 password 를 알아내고 이것을 사용해 
    로그인 할 수 있는 방법은 암호화 통신을 사용하는 ssh 외에
    간단하게 일반 plain text 형식으로 통신할 수 있는 telnet 이 있었고
    이것은 TCP wrapper 에 의해 localhost 에서만 접속 할 수 있는 상황이었습니다.
    가상 네트워크로 물려있는 NAT 서버에 침입했을 경우, reverse telnet 을 어떻게
    응용 할 수 있을까 하는 것이 문제의 요점이었습니다.
    직접 코딩한 분도 있었을 것이고, 인터넷에 있는 코드를 사용한 분,
    유틸리티와 파이프를 이용해 사용한 분이 있었던 것으로 기억됩니다.
    이런 경우 localhost socket() 생성, myhost socket() 생성, select() 를 이용해
    readfds 가 일어난 socket 을 찾아 recv() 후 다른 host 로 send()..
    이런 방식으로 중간 맵핑역할을 해주는 코드를 작성하면 됩니다.
    (물론 myhost 쪽에는 nc 를 사용하건 뭘 사용하건 특정 port 로 listen 상태가
    되어 있어야 합니다.)

- level6 문제의 요점 :
    MySQL Daemon 의 'CREATE FUNCTION' security hole

  level6 문제의 해석 :
    틀에 박힌 문제풀이가 싫기도 하고 그래서 이번 대회를 Real Penetration Test
    로 정하자는 강력한 요청을 한 것도 저 문제출제자 이기 때문에,
    기존에 나온 MySQL 의 버그를 이용해 shell 을 획득하는 문제를 내 보았습니다.
    굳이 CREATE FUNCTION 의 버그가 아니어도 좋았습니다.
    어차피 공격에는 정도가 없기 때문에 내부 쉘만 획득하면 level6 을 pass 한
    것으로 간주하려고 생각했었습니다.
    기존 대회 종료시간 6시가 다 되어서야 이 버그를 사용하는 로그들을 보게
    되었습니다.
    PTer 가 아니어도, 해킹/보안에 관심이 있다면 최신버그 리포트 같은것들은
    정보를 알아두어야 한다고 생각합니다.
    물론 그다지 최신은 아니겠죠.
    Full-Disclosure mailling list 에 뜬 것이 3월경으로 기억됩니다.
    daemon security hole, kernel security hole..
    패키지가 새로 업데이트 될 때마다
    CHANGES 로그나 어떤 부분의 코드가 변경이 되었는지 살펴보는 것은
    많은 도움이 됩니다.
    0day exploit 이다, 1sec exploit 이다.. 공개되지 않은 exploit 들에 대해서
    많은 말들을 하죠.
    그런것들을 다른 사람에게 얻기 보다 직접 발견하고 만들어 갈 수 있다면
    더 없이 좋을 것 같습니다.

- level7 문제의 요점 :
    pre-compiled binary 의 디버깅
    
  level7 문제의 해석 :
    본 해킹대회의 마지막 레벨이며, 
    문제는 기 컴파일 되어 있는 프로그램의 디버깅 문제입니다.
    어떻게 보면 Crack, Reverse Engineering 에 가깝지만 제일 가깝게 익힐 수 있고
    실 생활에 제일 많이 쓰이는 부분이라 생각합니다.
    그래서 출제해본 문제 입니다.
    zlib 압축 라이브러리를 사용해 압축을 한 후 나온 data 를 기 정의된
    keycode 와 1:1 매칭 시켜 xor 연산을 한 후 결과를 저장합니다.
    이러한 동작을 하는 프로그램과 결과 파일을 가지고 디버깅을 하여
    결과 파일을 원래의 파일대로 복원하여 보면 그 안에 hall 권한의 패스워드가
    적혀 있습니다.
    무심코 지나치는 프로그램 실행의 문제, 
    WinAPI, MFC, C... 로 짠 모든 프로그램을 디스어셈블러로 보면 비슷합니다.
    함수의 인자 정보를 Stack 에 저장해서 system call 을 실행하거나
    레지스터에 저장해서 system call 을 실행하거나 매우 비슷합니다.

- Addition:

192.168.0.3(내부 DB) 서버의 /tmp 디렉토리는 /etc/fstab 파일에 noexec 설정을 해 놓았습니다.
/etc/fstab 에는 각 partition 들이 mount 시에 사용할 option 을 설정할 수 있는 부분입니다.
여기에는 noexec,nodev,nosuid,noatime 등이 있는데, noexec option 때문에 /tmp 디렉토리에서의
executeable file 은 실행되지 않았을 것입니다.
참고로 nosuid 는 파일에 걸려있는 set-userid 설정을 무효화 하는 것이며,
noatime 은 file read/write 시에 access-time 을 기록하지 않는 option 으로,
file i/o 가 많은곳에 설정을 적용하면 나름대로의 optimizing 이 될 수 있을 것 입니다.

192.168.0.2(내부 Web) 서버의 /dev/shm 에 보면 shared memory 영역을 이용해 
파일을 만들고 디렉토리를 만든 사람이 있었습니다.
누굴까요..
